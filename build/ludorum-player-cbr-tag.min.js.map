{"version":3,"sources":["../src/__prologue__.js","../src/games/tictactoe.js","../src/Case.js","../src/CaseBase.js","../src/CaseBasedPlayer.js","../src/dbs/MemoryCaseBase.js","../src/__epilogue__.js","../src/dbs/SQLiteCaseBase.js"],"names":["__init__","base","Sermat","ludorum","directFeatures","DirectCBPlayer","MAPPINGS","equivalent","EquivalenceCBPlayer","declare","unimplemented","objects","raise","Randomness","raiseIf","Iterable","iterable","Future","exports","__package__","__name__","__dependencies__","__SERMAT__","include","dbs","games","Case","constructor","props","this","count","ply","features","actions","results","addResult","result","r","p","Array","isArray","length","merge","_case","identifier","join","JSON","stringify","record","obj","id","forEach","f","i","static fromRecord","k","substr","parse","static actionsFromMoves","players","moves","map","hasOwnProperty","toObject","static emptyResults","static __SERMAT__","serializer","CaseBase","params","random","DEFAULT","init","addCase","cases","distance","features1","features2","zip","mapApply","f1","f2","isNaN","Math","abs","sum","nn","cb","d","c","min","sorted","c1","c2","take","toArray","CaseBasedPlayer","Player","call","caseBase","MemoryCaseBase","game","casesFromGame","newCase","actionsFromMoves","emptyResults","addMatch","match","options","cbrPlayer","retainThreshold","run","then","history","filter","entry","state","flatten","addMatches","matches","matchCount","intervalId","logger","setInterval","info","logTime","sequence","clearInterval","populate","n","trainer","matchups","tournaments","Measurement","__matches__","range","ceil","product","Match","actionEvaluations","role","move","knn","forEachApply","ev","m","Object","values","gameEvaluation","checkMoves","movesFor","perform","push","decision","choice","action","t","minEval","Infinity","positiveActions","negativeActions","weightedChoice","normalizeWeights","assess","evaluation","player","name","finishedMatchesCount","tuple","matchPlayers","repeat","playerIndex","playerRole","__cases__","__index__","bind","SQLiteCaseBase","__setupDatabase__","Database","require","db","__db__","dbName","pragma","__tableName__","tableName","__createTable__","reference","actionColumns","keys","resultColumns","featureColumns","_","__runSQL__","sql","args","prototype","slice","arguments","stmt","prepare","apply","err","Error","__getSQL__","all","fields","changes","test","fromRecord","TicTacToe","board","split","chr","maps","mapping","charAt","from","Set","sort","activePlayer","b","indexOf","replace"],"mappings":"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","file":"ludorum-player-cbr-tag.min.js","sourcesContent":["/** Package wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar declare = base.declare,\n\t\tunimplemented = base.objects.unimplemented,\n\t\traise = base.raise,\n\t\traiseIf = base.raiseIf,\n\t\tRandomness = base.Randomness,\n\t\tIterable = base.Iterable,\n\t\titerable = base.iterable,\n\t\tFuture = base.Future;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t\t__package__: 'ludorum-player-cbr',\n\t\t\t__name__: 'ludorum_player_cbr',\n\t\t\t__init__: __init__,\n\t\t\t__dependencies__: [base, Sermat, ludorum],\n\t\t\t__SERMAT__: { include: [base, ludorum] },\n\n\t\t\tdbs: { /* Namespace for different types of case bases. */ },\n\t\t\tgames: { /* Namespace for functions and definitions for supporting games. */ }\n\t\t},\n\t\tdbs = exports.dbs,\n\t\tgames = exports.games\n\t;\n","/** # TicTacToe CBR\n \n*/\ngames.TicTacToe = (function () {\n\t/** ## Features direct from the board ####################################################### */\n\t\n\tvar directFeatures = function features(game) {\n\t\tvar board = typeof game === 'string' ? game : game.board;\n\t\treturn board.split('').map(function (chr) {\n\t\t\treturn chr === 'X' ? (+1) : chr === 'O' ? (-1) : 0; \n\t\t});\n\t};\n\n\tvar DirectCBPlayer = declare(CaseBasedPlayer, {\n\t\tconstructor: function DirectCBPlayer(params) {\n\t\t\tCaseBasedPlayer.call(this, params);\n\t\t}, \n\n\t\tgame: new ludorum.games.TicTacToe(),\n\n\t\tfeatures: directFeatures,\n\t\t\n\t\tcasesFromGame: function casesFromGame(game, ply, moves) {\n\t\t\treturn [\n\t\t\t\tthis.newCase(game, ply, moves, this.features(game))\n\t\t\t];\n\t\t}\n\t}); // declare TicTacToe.DirectCBPlayer\n\n\t/** ## Equivalence based on board symmetries and rotations. ################################# */\n\n\t/** `MAPPINGS` is a list of square indexes that define transformations between equivalent\n\tTictactoe boards.\n\t*/\n\tvar MAPPINGS = [\n\t\t[0,1,2,3,4,5,6,7,8], // original\n\t\t[2,1,0,5,4,3,8,7,6], // vertical axis symmetry\n\t\t[6,7,8,3,4,5,0,1,2], // horizontal axis symmetry\n\t\t[6,3,0,7,4,1,8,5,2], // 90 clockwise rotation\n\t\t[2,5,8,1,4,7,0,3,6], // 90 counter-clockwise rotation \n\t\t[8,7,6,5,4,3,2,1,0], // central symmetry\n\t\t[8,5,2,7,4,1,6,3,0], // 90 counter-clockwise rotation + vertical axis symmetry\n\t\t[0,3,6,1,4,7,2,5,8]  // 90 clockwise rotation + vertical axis symmetry\n\t];\n\n\tvar equivalent = function equivalent(game) {\n\t\tvar board = typeof game === 'string' ? game : game.board,\n\t\t\tmaps = MAPPINGS.map(function (mapping) {\n\t\t\t\treturn mapping.map(function (i) {\n\t\t\t\t\treturn board.charAt(i);\n\t\t\t\t}).join('');\n\t\t\t});\n\t\tmaps = Array.from(new Set(maps)); // Remove duplicates.\n\t\tmaps.sort();\n\t\treturn maps;\n\t};\n\n\tvar EquivalenceCBPlayer = declare(CaseBasedPlayer, {\n\t\tconstructor: function EquivalenceCBPlayer(params) {\n\t\t\tCaseBasedPlayer.call(this, params);\n\t\t}, \n\n\t\tgame: new ludorum.games.TicTacToe(),\n\n\t\tfeatures: directFeatures,\n\n\t\tMAPPINGS: MAPPINGS,\n\n\t\t/** \n\t\t*/\n\t\tcasesFromGame: function fromGame(game, ply, moves) {\n\t\t\tvar cbrPlayer = this,\n\t\t\t\tboard = game.board.split(''),\n\t\t\t\tactivePlayer = game.activePlayer();\n\t\t\tif (moves) {\n\t\t\t\tboard[moves[activePlayer]] = '!';\n\t\t\t}\n\t\t\tvar boards = equivalent(board.join('')).map(function (b) {\n\t\t\t\tvar m = b.indexOf('!');\n\t\t\t\treturn b.replace('!', '_') + m;\n\t\t\t});\n\t\t\treturn boards.map(function  (board) {\n\t\t\t\tif (moves) {\n\t\t\t\t\tmoves[activePlayer] = +(board.substr(9));\n\t\t\t\t}\n\t\t\t\treturn cbrPlayer.newCase(game, ply, moves, cbrPlayer.features(board.substr(0,9)));\n\t\t\t});\n\t\t}\n\t}); // declare TicTacToe.EquivalenceCBPlayer\n\n\treturn {\n\t\tdirectFeatures: directFeatures,\n\t\tDirectCBPlayer: DirectCBPlayer,\n\n\t\tMAPPINGS: MAPPINGS,\n\t\tequivalent: equivalent,\n\t\tEquivalenceCBPlayer: EquivalenceCBPlayer\n\t};\n})();","/** # Case\n\nTODO\n*/\nvar Case = exports.Case = declare({\n\t/** The `props` argument must have:\n\t\n\t+ `count`: the amount of times this case has been seen,\n\t+ `ply`: a number with the average ply where this case happens,\n\t+ `features`: an array of numbers representing the relevant information of the case,\n\t+ `actions`: an object mapping players to actions,\n\t+ `results`: an object mapping players to a 3 number array with the counts for: victories, \n\tdraws and defeats.\n\t*/\n\tconstructor: function Case(props) {\n\t\tthis.count = +props.count || 1;\n\t\tthis.ply = +props.ply;\n\t\tthis.features = props.features;\n\t\tthis.actions = props.actions;\n\t\tthis.results = props.results;\n\t},\n\n\t/** Adding a result to a case updates the `results` property to acount for the given `result`. \n\t*/\n\taddResult: function addResult(result) {\n\t\tvar r;\n\t\tfor (var p in result) {\n\t\t\tr = result[p];\n\t\t\tif (Array.isArray(r) && r.length === 3) { // case results\n\t\t\t\tthis.results[p][0] += result[p][0];\n\t\t\t\tthis.results[p][1] += result[p][1];\n\t\t\t\tthis.results[p][2] += result[p][2];\n\t\t\t} else if (typeof r === 'number') {\n\t\t\t\tthis.results[p][r > 0 ? 0 : r === 0 ? 1 : 2]++;\n\t\t\t} else {\n\t\t\t\traise('Invalid result (', r, ')!');\n\t\t\t}\n\t\t}\n\t\tthis.count = (this.count || 0) + 1;\n\t\treturn this;\n\t},\n\n\t/** Merging `this` case with another case updates the properties `ply`, `count` and `results`.\n\t*/\n\tmerge: function merge(_case) {\n\t\tthis.ply = (this.ply * this.count + _case.ply * _case.count) / (this.count + _case.count);\n\t\tthis.count += _case.count;\n\t\tthis.addResult(_case.result);\n\t},\n\n\t// ## Databases ################################################################################\n\n\t/** An `identifier` for a case is a string that can be used as a primary key of a case base.\n\t*/\n\tidentifier: function identifier() {\n\t\treturn this.features.join(',') + JSON.stringify(this.actions);\n\t},\n\n\t/** Return a database record for this case.\n\t*/\n\trecord: function record(obj) {\n\t\tobj = obj || {};\n\t\tvar p;\n\t\tobj.id = this.identifier();\n\t\tobj.ply = this.ply;\n\t\tobj.count = this.count;\n\t\tthis.features.forEach(function (f, i) {\n\t\t\tobj['f'+ i] = f;\n\t\t});\n\t\tfor (p in this.actions) {\n\t\t\tobj['a_'+ p] = JSON.stringify(this.actions[p]);\n\t\t}\n\t\tfor (p in this.results) {\n\t\t\tobj['won_'+ p] = this.results[p][0];\n\t\t\tobj['tied_'+ p] = this.results[p][1];\n\t\t\tobj['lost_'+ p] = this.results[p][2];\n\t\t}\n\t\treturn obj;\n\t},\n\n\t/** The static method `fromRecord` creates a case from a database record.\n\t*/\n\t'static fromRecord': function fromRecord(record) {\n\t\tvar features = [],\n\t\t\tactions = {},\n\t\t\tresults = {};\n\t\tfor (var k in record) {\n\t\t\tif (k[0] === 'f') {\n\t\t\t\tfeatures[+k.substr(1)] = record[k];\n\t\t\t} else if (k.substr(0, 2) === 'a_') {\n\t\t\t\tactions[k.substr(2)] = JSON.parse(record[k]);\n\t\t\t} else if (k.substr(0, 4) === 'won_') {\n\t\t\t\tvar p = k.substr(4);\n\t\t\t\tresults[p] = [record['won_'+ p], record['tied_'+ p], record['lost_'+ p]];\n\t\t\t}\n\t\t}\n\t\treturn new this({ \n\t\t\tcount: record.count,\n\t\t\tply: record.ply,\n\t\t\tfeatures: features,\n\t\t\tactions: actions,\n\t\t\tresults: results\n\t\t});\n\t},\n\n\t// ## Utilities ################################################################################\n\n\t/** This method adds null actions to a copy of the `moves` object.\n\t*/\n\t'static actionsFromMoves': function getActions(players, moves) {\n\t\treturn iterable(players).map(function (p) {\n\t\t\treturn [p, moves && moves.hasOwnProperty(p) ? moves[p] : null];\n\t\t}).toObject();\n\t},\n\n\t/** `emptyResults` creates an object that maps every player to an array with 3 zeros.\n\t*/\n\t'static emptyResults': function emptyResults(players) {\n\t\treturn iterable(players).map(function (p) {\n\t\t\treturn [p, [0, 0, 0]];\n\t\t}).toObject();\n\t},\n\n\t/** Serialization and materialization using Sermat.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: 'Case',\n\t\tserializer: function serialize_Case(obj) {\n\t\t\treturn [{\n\t\t\t\tcount: obj.count,\n\t\t\t\tply: obj.ply,\n\t\t\t\tfeatures: obj.features,\n\t\t\t\tactions: obj.actions,\n\t\t\t\tresults: obj.results\n\t\t\t}];\n\t\t}\n\t}\n}); // declare Case","/** # CaseBase \n\nA `CaseBase` holds all cases for a game.\n*/\nvar CaseBase = exports.CaseBase = declare({\n\tconstructor: function CaseBase(params) {\n\t\tthis.random = params && params.random || Randomness.DEFAULT;\n\t},\n\n\t/** ## Abstract methods ##################################################################### */\n\n\t/** Depending on its implementation, a case base may require information about the game and the\n\tplayer that uses it in order to work. \n\t*/\n\tinit: unimplemented('CaseBase', 'init(game, player)'),\n\n\t/** Adding a case (or cases) to the database is not implemented by default.\n\t*/\n\taddCase: unimplemented('CaseBase', 'addCase(_case)'),\n\n\t/** The `cases` method returns the sequence of all cases in the database. Case order is not\n\tdefined.\n\t*/\n\tcases: unimplemented('CaseBase', 'cases(filters)'),\n\n\t/** ## Case retrieval ####################################################################### */\n\n\t/** The default `distance` is a form of Manhattan distance, which does not count `null` or `NaN`\n\tfeatures.\n\t*/\n\tdistance: function distance(features1, features2) {\n\t\treturn base.Iterable.zip(features1, features2).mapApply(function (f1, f2) {\n\t\t\tif (f1 !== null && !isNaN(f1) && f2 !== null && !isNaN(f2)) {\n\t\t\t\treturn Math.abs(f1 - f2);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}).sum();\n\t},\n\n\t/** The `nn` method returns the `k` neareast neighbours of the given cases. \n\t*/\n\tnn: function nn(k, cases) {\n\t\tvar cb = this;\n\t\tcases = iterable(cases);\n\t\treturn iterable(this.cases()).map(function (_case) {\n\t\t\t\tvar d = cases.map(function (c) {\n\t\t\t\t\treturn cb.distance(_case.features, c.features);\n\t\t\t\t}).min();\n\t\t\t\treturn [_case, d];\n\t\t\t}).sorted(function (c1, c2) {\n\t\t\t\treturn c1[1] - c2[1];\n\t\t\t}).take(+k).toArray();\n\t}\n}); // declare CaseBase","/** # CaseBasedPlayer \n\n*/\nvar CaseBasedPlayer = exports.CaseBasedPlayer = base.declare(ludorum.Player, {\n\t/** \n\t*/\n\tconstructor: function CaseBasedPlayer(params) {\n\t\tludorum.Player.call(this, params);\n\t\tthis.k = params && params.k || 20;\n\t\tthis.caseBase = params && params.caseBase || new MemoryCaseBase();\n\t\tthis.caseBase.init(this.game, this);\n\t},\n\n\t/** The method `casesFromGame` takes a `game` state and returns a case. This object includes\n\tthe game state's features, ply, actions and results.\n\t*/\n\tcasesFromGame: base.objects.unimplemented('CaseBasedPlayer', 'casesFromGame(game, ply, moves)'),\n\n\t/**\n\t*/\n\tnewCase: function newCase(game, ply, moves, features) {\n\t\treturn new Case({\n\t\t\tply: +ply,\n\t\t\tfeatures: features,\n\t\t\tactions: Case.actionsFromMoves(game.players, moves),\n\t\t\tresults: Case.emptyResults(game.players)\n\t\t});\n\t},\n\n\t/** ## Database building #################################################################### */\n\n\t/** The `addMatch` method runs the given `match` and adds all its game states as cases in the\n\tplayer's database. It returns a promise.\n\t*/\n\taddMatch: function addMatch(match, options) {\n\t\tvar cbrPlayer = this,\n\t\t\tretainThreshold = +options.retainThreshold || 0;\n\t\treturn match.run().then(function () {\n\t\t\tvar result = match.result(),\n\t\t\t\tcases = iterable(match.history).filter(function (entry) {\n\t\t\t\t\treturn !entry.moves;\n\t\t\t\t}, function (entry, i) {\n\t\t\t\t\treturn cbrPlayer.casesFromGame(entry.state, i, entry.moves);  \n\t\t\t\t}).flatten().map(function (_case) {\n\t\t\t\t\treturn _case.addResult(result);\n\t\t\t\t});\n\t\t\tcbrPlayer.caseBase.addCase(cases);\n\t\t\treturn match;\n\t\t});\n\t},\n\n\t/** The `addMatches` method takes a sequence of `matches`, runs each in order and adds all \n\tresulting game states to the database. It returns a promise.\n\t*/\n\taddMatches: function addMatches(matches, options) {\n\t\tvar cbrPlayer = this,\n\t\t\tmatchCount = 0,\n\t\t\tintervalId = 0;\n\t\tif (options.logger) {\n\t\t\tintervalId = setInterval(function () {\n\t\t\t\toptions.logger.info(\"Added \"+ matchCount +\" matches.\");\n\t\t\t}, options.logTime || 30000);\n\t\t}\n\t\treturn Future.sequence(matches, function (match) {\n\t\t\tmatchCount++;\n\t\t\treturn cbrPlayer.addMatch(match, options);\n\t\t}).then(function (r) {\n\t\t\tif (options.logger) {\n\t\t\t\toptions.logger.info(\"Added \"+ matchCount +\" matches.\");\n\t\t\t}\n\t\t\tclearInterval(intervalId);\n\t\t\treturn r;\n\t\t});\n\t},\n\n\t/** The `populate` method adds cases to the database by running several matches and adding the\n\tresulting game states. The `options` argument may include the following:\n\n\t+ `game`: The game state from which to start the matches. The database's `game` is used by \n\tdefault.\n\n\t+ `n`: The number of matches to run; 100 by default.\n\n\t+ `trainer`: The player to use agains the opponents. This player is used by default.\n\n\t+ `players`: The trainer's opponents to use to play the matches. The trainer is used by default.\n\n\tOther options are passed to the `addMatches` method. The result is a promise.\n\t*/\n\tpopulate: function populate(options) {\n\t\toptions = options || {};\n\t\tvar game = options.game || this.game,\n\t\t\tn = isNaN(options.n) ? 100 : +options.n,\n\t\t\ttrainer = options.trainer || this,\n\t\t\tplayers = options.players || [trainer];\n\t\tif (!Array.isArray(players)) {\n\t\t\tplayers = [players];\n\t\t}\n\t\tvar tournament = new ludorum.tournaments.Measurement(game, trainer, players, 1),\n\t\t\tmatchups = tournament.__matches__().toArray();\n\t\treturn this.addMatches(Iterable.range(Math.ceil(n / matchups.length))\n\t\t\t.product(matchups)\n\t\t\t.mapApply(function (i, match) {\n\t\t\t\treturn new ludorum.Match(game, match.players);\n\t\t\t}), options);\n\t},\n\n\t/** ## Playing ############################################################################## */\n\n\t/** `actionEvaluations` assigns a number to every action available to the given `role` at the\n\tgiven `game` state. It uses the case base to retrieve the _k_ most similar cases. \n\t*/\n\tactionEvaluations: function actionEvaluations(game, role, options) { //FIXME\n\t\tvar k = options && +options.k || this.k,\n\t\t\tr = base.iterable(game.moves()[role]).map(function (move) {\n\t\t\t\treturn [JSON.stringify(move), [move, 0]];\n\t\t\t}).toObject(),\n\t\t\tknn = this.caseBase.nn(k, this.casesFromGame(game));\n\t\titerable(knn).forEachApply(function (_case, distance) {\n\t\t\tvar m = r[JSON.stringify(_case.actions[role])],\n\t\t\t\tresult = _case.results[role],\n\t\t\t\tev, support, ratio;\n\t\t\tif (m) {\n\t\t\t\tsupport = _case.count / (10 + _case.count);\n\t\t\t\tratio = (result[0] + result[2] && \n\t\t\t\t\t((result[0] - result[2]) / (result[0] + result[2])));\n\t\t\t\tev = support * ratio * (1 / (1 + distance));\n\t\t\t\tif (isNaN(ev)) {\n\t\t\t\t\traise(\"Action evaluation is NaN for case: \", JSON.stringify(_case),\n\t\t\t\t\t\t\" (distance= \", distance, \")!\");\n\t\t\t\t}\n\t\t\t\tm[1] += ev;\n\t\t\t}\n\t\t});\n\t\treturn Object.values(r);\n\t},\n\n\t/** `gameEvaluation` assigns a number to the given `game` state. It uses the case base to\n\tretrieve the _k_ most similar cases, and aggregates their results. It is suitable for an \n\theuristic player. \n\t*/\n\tgameEvaluation: function gameEvaluation(game, role, options) { //FIXME\n\t\tvar k = options && +options.k || this.k,\n\t\t\tr = base.iterable(game.moves()[role]).map(function (move) {\n\t\t\t\treturn [JSON.stringify(move), [move, 0]];\n\t\t\t}).toObject(),\n\t\t\tknn = cb.nn(k, game, role);\n\t\treturn iterable(knn).map(function (_case, distance) {\n\t\t\treturn (_case.results[role][0] - _case.results[role][2]) / (1 + distance);\n\t\t}).sum();\n\t},\n\n\t/** `checkMoves` classifies all moves available to the given `role` at the given `game` state.\n\tThe result is an array of two arrays of moves. The first array has all the winning moves, while\n\tthe second array has all the moves that do not finish the game. Losing and drawing moves are\n\tdiscarded.  \n\t*/\n\tcheckMoves: function checkMoves(game, role) {\n\t\tvar r = [[], []];\n\t\tthis.movesFor(game, role).forEach(function (move) {\n\t\t\tvar game2 = game.perform(move, role),\n\t\t\t\tresult = game2.result();\n\t\t\tif (!result) {\n\t\t\t\tr[1].push(move); // Not a losing move.\n\t\t\t} else if (result[role] > 0) {\n\t\t\t\tr[0].push(move); // Winning move.\n\t\t\t}\n\t\t});\n\t\treturn r;\n\t},\n\n\t/** A `CaseBasedPlayer` takes the action evaluations from the case base, and splits them into\n\tactions with possitive evaluations and the ones with evaluations less than or equal to zero. If \n\tthere are possitively evaluated actions, one of these is chosen randomly with a probability \n\tproportional to the evaluation. If all actions have non possitive evaluations, one of these is\n\tchosen with a probability inversely proportional to the evaluation.   \n\t*/\n\tdecision: function decision(game, role) {\n\t\tvar checkMoves = this.checkMoves(game, role);\n\t\tif (checkMoves[0].length > 0) {\n\t\t\treturn this.random.choice(checkMoves[0]);\n\t\t} else if (checkMoves[1].length < 2) {\n\t\t\tif (checkMoves[1].length === 1) {\n\t\t\t\treturn checkMoves[1][0];\n\t\t\t} else { // if (checkMoves[1].length < 1)\n\t\t\t\treturn this.random.choice(this.movesFor(game, role));\n\t\t\t}\n\t\t}\n\t\tvar actions = iterable(checkMoves[1]).map(function (action) {\n\t\t\t\treturn [action +'', [action, 0]];\n\t\t\t}).toObject();\n\t\tthis.actionEvaluations(game, role, { k: this.k }).forEach(function (t) {\n\t\t\tvar entry = actions[t[0] +''];\n\t\t\tif (entry) {\n\t\t\t\tentry[1] += t[1];\n\t\t\t}\n\t\t});\n\t\tvar minEval = +Infinity,\n\t\t\tpositiveActions = Object.values(actions).filter(function (t) {\n\t\t\t\tminEval = Math.min(minEval, t[1]);\n\t\t\t\treturn t[1] > 0;\n\t\t\t}),\n\t\t\tnegativeActions = Object.values(actions).filter(function (t) {\n\t\t\t\treturn t[1] <= 0;\n\t\t\t}).map(function (t) {\n\t\t\t\treturn [t[0], t[1] - minEval];\n\t\t\t}),\n\t\t\tresult;\n\t\tif (positiveActions.length > 1) {\n\t\t\tresult = this.random.weightedChoice(this.random.normalizeWeights(positiveActions));\n\t\t} else if (positiveActions.length === 1) {\n\t\t\tresult = positiveActions[0][0];\n\t\t} else {\n\t\t\tresult = this.random.weightedChoice(this.random.normalizeWeights(negativeActions));\n\t\t}\n\t\treturn result;\n\t},\n\n\t// Utilities. /////////////////////////////////////////////////////////////////////////////////\n\n\tassess: function assess(players, options) { //FIXME\n\t\tif (!Array.isArray(players)) {\n\t\t\tplayers = [players];\n\t\t}\n\t\tvar cbrPlayer = this,\n\t\t\tgame = this.game,\n\t\t\tevaluation = iterable(players).map(function (player) {\n\t\t\t\treturn [player.name, iterable(game.players).map(function (p) {\n\t\t\t\t\t\treturn [p, [0,0,0]];\n\t\t\t\t\t}).toObject()];\n\t\t\t\t}).toObject(),\n\t\t\tn = options && +options.n || 300,\n\t\t\tfinishedMatchesCount = 0,\n\t\t\tintervalId = 0;\n\t\tif (options.logger) {\n\t\t\tintervalId = setInterval(function () {\n\t\t\t\toptions.logger.info(\"Assessment finished \"+ finishedMatchesCount +\" matches.\");\n\t\t\t}, options.logTime || 30000);\n\t\t}\n\t\treturn base.Future.sequence(base.Iterable.range(n).product(players), function (tuple) {\n\t\t\tvar player = tuple[1],\n\t\t\t\tmatchPlayers = base.Iterable.repeat(player, game.players.length).toArray(),\n\t\t\t\tplayerIndex = tuple[0] % game.players.length,\n\t\t\t\tplayerRole = game.players[playerIndex];\n\t\t\tmatchPlayers[playerIndex] = cbrPlayer;\n\t\t\tvar match = new ludorum.Match(game, matchPlayers);\n\t\t\treturn match.run().then(function () {\n\t\t\t\tvar r = match.result()[playerRole];\n\t\t\t\tevaluation[player.name][playerRole][r > 0 ? 0 : r < 0 ? 2 : 1]++;\n\t\t\t\tfinishedMatchesCount++;\n\t\t\t});\n\t\t}).then(function () {\n\t\t\tclearInterval(intervalId);\n\t\t\tif (options.logger) {\n\t\t\t\toptions.logger.info(\"Assessment finished \"+ finishedMatchesCount +\" matches.\");\n\t\t\t}\n\t\t\treturn evaluation;\n\t\t});\n\t}\n}); // declare CBRPlayer","/** # MemoryCaseBase\n\nA memory implementation of a `CaseBase`.\n*/\nvar MemoryCaseBase = dbs.MemoryCaseBase = declare(CaseBase, {\n\tconstructor: function MemoryCaseBase(params) {\n\t\tCaseBase.call(this, params);\n\t\tthis.__cases__ = [];\n\t\tthis.__index__ = {};\n\t\tif (params && params.__cases__) {\n\t\t\tparams.__cases__.forEach(this.addCase.bind(this));\n\t\t}\n\t},\n\n\tinit: function init(game, player) {\n\t\t// No initialization required.\n\t},\n\n\tcases: function cases() {\n\t\treturn base.iterable(this.__cases__);\n\t},\n\t\n\taddCase: function addCase(_case) {\n\t\tif (_case instanceof Case) {\n\t\t\tvar id = _case.identifier();\n\t\t\tif (this.__index__.hasOwnProperty(id)) {\n\t\t\t\tvar storedCase = this.__cases__[this.__index__[id]];\n\t\t\t\tstoredCase.merge(_case);\n\t\t\t} else {\n\t\t\t\tvar i = this.__cases__.push(_case) - 1;\n\t\t\t\tthis.__index__[id] = i;\n\t\t\t}\n\t\t} else {\n\t\t\titerable(_case).forEach(this.addCase.bind(this));\n\t\t}\n\t},\n\n\t/** ## Utilities ############################################################################ */\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'MemoryCaseBase',\n\t\tserializer: function serialize_MemoryCaseBase(obj) {\n\t\t\treturn [{\n\t\t\t\t__cases__: obj.__cases__\n\t\t\t}];\n\t\t}\n\t},\n}); // declare MemoryCaseBase","// See __prologue__.js\n\treturn exports;\n}\n","/** # SQLiteCaseBase\n\nAn implementation of a `CaseBase` using SQLite3 through `better-sqlite3`.\n*/\ndbs.SQLiteCaseBase = declare(CaseBase, {\n\t/** \n\t*/\n\tconstructor: function SQLiteCaseBase(params) {\n\t\tCaseBase.call(this, params);\n\t\tthis.__setupDatabase__(params);\n\t},\n\n\t/** ## Database setup and management ######################################################## */\n\n\t/**\n\t*/\n\t__setupDatabase__: function __setupDatabase__(params) {\n\t\tvar Database = this.Database || require('better-sqlite3');\n\t\tif (params.db instanceof Database) {\n\t\t\tthis.__db__ = params.db;\n\t\t} else {\n\t\t\tvar dbName = typeof params.db === 'string' ? params.db : './cbr-test.sqlite';\n\t\t\tthis.__db__ = new Database(dbName);\n\t\t\tthis.__db__.pragma('journal_mode = OFF'); // Disable transactions.\n\t\t\tthis.__db__.pragma('cache_size = -128000'); // Increase default cache size.\n\t\t\tthis.__db__.pragma('encoding = \"UTF-8\"'); // Increase default cache size.\n\t\t}\n\t\tthis.__tableName__ = params.tableName;\n\t},\n\n\t__createTable__: function __createTable__(tableName, reference) {\n\t\tvar actionColumns = Object.keys(reference.actions).map(function (p) {\n\t\t\t\treturn 'a_'+ p +' TEXT';\n\t\t\t}).join(', '),\n\t\t\tresultColumns = Object.keys(reference.results).map(function (p) {\n\t\t\t\treturn 'won_'+ p +' INTEGER, tied_'+ p +' INTEGER, lost_'+ p +' INTEGER';\n\t\t\t}).join(', '),\n\t\t\tfeatureColumns = reference.features.map(function (_, i) {\n\t\t\t\treturn 'f'+ i +' INTEGER';\n\t\t\t}).join(', ');\n\t\treturn this.__runSQL__('CREATE TABLE IF NOT EXISTS '+ tableName +\n\t\t\t'(id TEXT PRIMARY KEY, count INTEGER, ply REAL, '+\n\t\t\tactionColumns +', '+ resultColumns +', '+ featureColumns +')');\n\t},\n\n\t__runSQL__: function __runSQL__(sql) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\ttry {\n\t\t\tvar stmt = this.__db__.prepare(sql);\n\t\t\treturn stmt.run.apply(stmt, args);\n\t\t} catch (err) {\n\t\t\tthrow new Error(\"Error executing `\"+ sql +\"` \"+ JSON.stringify(args) +\"!\");\n\t\t}\n\t},\n\n\t__getSQL__: function __getSQL__(sql) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\ttry {\n\t\t\tvar stmt = this.__db__.prepare(sql);\n\t\t\treturn stmt.all.apply(stmt, args);\n\t\t} catch (err) {\n\t\t\tthrow new Error(\"Error querying `\"+ sql +\"` \"+ JSON.stringify(args) +\"!\");\n\t\t}\n\t},\n\n\t/** ## Cases ############################################################################### */\n\n\tinit: function init(game, player) {\n\t\tthis.__tableName__ = this.__tableName__ || 'CB_'+ game.name;\n\t\tvar reference = player.casesFromGame(game, 0, game.moves())[0];\n\t\tthis.__createTable__(this.__tableName__, reference);\n\t},\n\t\n\taddCase: function addCase(_case) {\n\t\tif (_case instanceof Case) {\n\t\t\tvar record = _case.record(),\n\t\t\t\tfields = Object.keys(record),\n\t\t\t\tsql = 'INSERT OR IGNORE INTO '+ this.__tableName__ +' ('+ fields.join(',') +\n\t\t\t\t\t') VALUES ('+ Iterable.repeat('?', fields.length).join(',') +')',\n\t\t\t\tisNew = this.__runSQL__(sql, fields.map(function (f) {\n\t\t\t\t\t\treturn record[f];\n\t\t\t\t\t})).changes > 0;\n\t\t\tif (!isNew) { // Insert was ignored because the case is already stored.\n\t\t\t\tthis.__runSQL__('UPDATE '+ this.__tableName__ +' '+\n\t\t\t\t\t'SET count = count + 1, ply = (ply * count + '+ (_case.ply || 0) +') / (count + 1), '+\n\t\t\t\t\tObject.keys(record).filter(function (k) {\n\t\t\t\t\t\treturn /^(won_|tied_|lost_)/.test(k);\n\t\t\t\t\t}).map(function (k) {\n\t\t\t\t\t\treturn k +' = '+ k +' + '+ record[k];\n\t\t\t\t\t}).join(', ') +' WHERE id = \\''+ record.id +'\\''\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\titerable(_case).forEach(this.addCase.bind(this));\n\t\t}\n\t},\n\n\tcases: function cases() {\n\t\treturn this.__getSQL__('SELECT * FROM '+ this.__tableName__)\n\t\t\t.map(Case.fromRecord.bind(Case));\n\t},\n\n\t/*FIXME\n\t__nn_sql__: function __nn_sql__(k, game) {\n\t\tvar cases = this.Case.fromGame(game);\n\t\treturn 'SELECT *, min('+ cases.map(function (_case) {\n\t\t\t\treturn _case.features.map(function (v, i) {\n\t\t\t\t\treturn v !== null && !isNaN(v) ? 'abs(ifnull(f'+ i +'-('+ v +'),0))' : '0';\n\t\t\t\t}).join('+');\n\t\t\t}).join(', ') +') AS distance '+\n\t\t\t'FROM '+ this.__tableName__ +' '+\n\t\t\t'ORDER BY distance ASC LIMIT '+ k;\n\t},\n\n\tnn: function nn(k, game) {\n\t\tvar cb = this,\n\t\t\tsql = this.__nn_sql__(k, game);\n\t\treturn this.__db__.prepare(sql).all().map(function (row) {\n\t\t\treturn [cb.Case.fromRecord(row), row.distance];\n\t\t});\n\t}\n\t*/\n}); // declare SQLiteCaseBase\n\n"]}