{"version":3,"sources":["../src/__prologue__.js","../src/Case.js","../src/CaseBase.js","../src/CBRPlayer.js","../src/dbs/MemoryCaseBase.js","../src/__epilogue__.js","../src/dbs/SQLiteCaseBase.js","../src/games/tictactoe.js","../src/games/risk.js"],"names":["__init__","base","Sermat","ludorum","declare","unimplemented","objects","raise","Randomness","raiseIf","Iterable","iterable","Future","exports","__package__","__name__","__dependencies__","__SERMAT__","include","dbs","games","Case","constructor","props","this","count","ply","features","actions","results","static fromGame","addResult","result","r","p","Array","isArray","length","merge","_case","getMove","game","role","identifier","join","JSON","stringify","record","obj","id","forEach","f","i","static fromRecord","k","substr","parse","static emptyResults","players","map","toObject","static actionsFromMoves","moves","hasOwnProperty","static __SERMAT__","serializer","CaseBase","params","random","DEFAULT","distance","features1","features2","zip","mapApply","f1","f2","isNaN","Math","abs","sum","addCase","addMatch","match","options","cdb","retainThreshold","run","then","entry","history","fromGame","state","addMatches","matches","matchCount","intervalId","logger","setInterval","info","logTime","sequence","clearInterval","populate","n","trainer","RandomPlayer","name","matchups","tournaments","Measurement","__matches__","toArray","range","ceil","product","Match","cases","nn","cb","d","c","min","sorted","c1","c2","slice","closestDistance","closest","Infinity","actionEvaluations","roleIndex","indexOf","move","knn","forEachApply","ev","m","Object","values","gameEvaluation","encoding","CBRPlayer","Player","call","caseBase","checkMoves","movesFor","perform","push","decision","choice","action","t","minEval","positiveActions","filter","negativeActions","weightedChoice","normalizeWeights","assess","cbrPlayer","evaluation","player","finishedMatchesCount","tuple","matchPlayers","repeat","playerIndex","playerRole","MemoryCaseBase","__cases__","__index__","SQLiteCaseBase","__setupDatabase__","Database","require","db","__db__","toLowerCase","pragma","__tableName__","tableName","__createTable__","actionColumns","resultColumns","featureColumns","_","__runSQL__","sql","args","prototype","arguments","stmt","prepare","apply","err","Error","__getSQL__","all","fields","keys","changes","sets","fromRecord","bind","__nn_sql__","v","row","TicTacToe","directFeatures","board","split","chr","MAPPINGS","equivalent","maps","mapping","charAt","sort","DirectCase","actionsFromMoves","emptyResults","EquivalenceCase","activePlayer","boards","b","replace","Risk","Turn","otherPlayer","active","other","boardMap","territories","turn","s","concat","stage"],"mappings":"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","file":"ludorum-player-cbr-tag.min.js","sourcesContent":["/** Package wrapper and layout.\r\n*/\r\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\r\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\r\n\tvar declare = base.declare,\r\n\t\tunimplemented = base.objects.unimplemented,\r\n\t\traise = base.raise,\r\n\t\traiseIf = base.raiseIf,\r\n\t\tRandomness = base.Randomness,\r\n\t\tIterable = base.Iterable,\r\n\t\titerable = base.iterable,\r\n\t\tFuture = base.Future;\r\n\r\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\r\n\tvar exports = {\r\n\t\t\t__package__: 'ludorum-player-cbr',\r\n\t\t\t__name__: 'ludorum_player_cbr',\r\n\t\t\t__init__: __init__,\r\n\t\t\t__dependencies__: [base, Sermat, ludorum],\r\n\t\t\t__SERMAT__: { include: [base, ludorum] },\r\n\r\n\t\t\tdbs: { /* Namespace for different types of case bases. */ },\r\n\t\t\tgames: { /* Namespace for functions and definitions for supporting games. */ }\r\n\t\t},\r\n\t\tdbs = exports.dbs,\r\n\t\tgames = exports.games\r\n\t;\r\n","/** # Case\r\n\r\nTODO\r\n*/\r\nvar Case = exports.Case = declare({\r\n\t/** The `props` argument must have:\r\n\t\r\n\t+ `count`: the amount of times this case has been seen,\r\n\t+ `ply`: a number with the average ply where this case happens,\r\n\t+ `features`: an array of numbers representing the relevant information of the case,\r\n\t+ `actions`: an object mapping players to actions,\r\n\t+ `results`: an object mapping players to a 3 number array with the counts for: victories, \r\n\tdraws and defeats.\r\n\t*/\r\n\tconstructor: function Case(props) {\r\n\t\tthis.count = +props.count || 1;\r\n\t\tthis.ply = +props.ply;\r\n\t\tthis.features = props.features;\r\n\t\tthis.actions = props.actions;\r\n\t\tthis.results = props.results;\r\n\t},\r\n\r\n\t/** The static method `fromGame` creates a case from a game state, ply number and moves\r\n\tperformed.\r\n\t*/\r\n\t'static fromGame': base.objects.unimplemented('Case', 'fromGame(game, ply, moves)'),\r\n\r\n\t/** Adding a result to a case updates the `results` property to acount for the given `result`. \r\n\t*/\r\n\taddResult: function addResult(result) {\r\n\t\tvar r;\r\n\t\tfor (var p in result) {\r\n\t\t\tr = result[p];\r\n\t\t\tif (Array.isArray(r) && r.length === 3) { // case results\r\n\t\t\t\tthis.results[p][0] += result[p][0];\r\n\t\t\t\tthis.results[p][1] += result[p][1];\r\n\t\t\t\tthis.results[p][2] += result[p][2];\r\n\t\t\t} else if (typeof r === 'number') {\r\n\t\t\t\tthis.results[p][r > 0 ? 0 : r === 0 ? 1 : 2]++;\r\n\t\t\t} else {\r\n\t\t\t\traise('Invalid result (', r, ')!');\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.count = (this.count || 0) + 1; \r\n\t},\r\n\r\n\t/** Merging `this` case with another case updates the properties `ply`, `count` and `results`.\r\n\t*/\r\n\tmerge: function merge(_case) {\r\n\t\tthis.ply = (this.ply * this.count + _case.ply * _case.count) / (this.count + _case.count);\r\n\t\tthis.count += _case.count;\r\n\t\tthis.addResult(_case.result);\r\n\t},\r\n\r\n\t/** Cases' features and actions can result from transformations and apply to several different\r\n\tgame states. The `getMove` method allows a case to adapt its action to a given game state. \r\n\t*/\r\n\tgetMove: function getMove(game, role) {\r\n\t\treturn this.actions[role];\r\n\t},\r\n\r\n\t// ## Databases ################################################################################\r\n\r\n\t/** An `identifier` for a case is a string that can be used as a primary key of a case base.\r\n\t*/\r\n\tidentifier: function identifier() {\r\n\t\treturn this.features.join(',') + JSON.stringify(this.actions);\r\n\t},\r\n\r\n\t/** Return a database record for this case.\r\n\t*/\r\n\trecord: function record(obj) {\r\n\t\tobj = obj || {};\r\n\t\tvar p;\r\n\t\tobj.id = this.identifier();\r\n\t\tobj.ply = this.ply;\r\n\t\tobj.count = this.count;\r\n\t\tthis.features.forEach(function (f, i) {\r\n\t\t\tobj['f'+ i] = f;\r\n\t\t});\r\n\t\tfor (p in this.actions) {\r\n\t\t\tobj['a_'+ p] = JSON.stringify(this.actions[p]);\r\n\t\t}\r\n\t\tfor (p in this.results) {\r\n\t\t\tobj['won_'+ p] = this.results[p][0];\r\n\t\t\tobj['tied_'+ p] = this.results[p][1];\r\n\t\t\tobj['lost_'+ p] = this.results[p][2];\r\n\t\t}\r\n\t\treturn obj;\r\n\t},\r\n\r\n\t/** The static method `fromRecord` creates a case from a database record.\r\n\t*/\r\n\t'static fromRecord': function fromRecord(record) {\r\n\t\tvar features = [],\r\n\t\t\tactions = {},\r\n\t\t\tresults = {};\r\n\t\tfor (var k in record) {\r\n\t\t\tif (k[0] === 'f') {\r\n\t\t\t\tfeatures[+k.substr(1)] = record[k];\r\n\t\t\t} else if (k.substr(0, 2) === 'a_') {\r\n\t\t\t\tactions[k.substr(2)] = JSON.parse(record[k]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var p in results) {\r\n\t\t\tresults[p] = [record['won_'+ p], record['tied_'+ p], record['lost_'+ p]];\r\n\t\t}\r\n\t\treturn new this({ \r\n\t\t\tcount: record.count,\r\n\t\t\tply: record.ply,\r\n\t\t\tfeatures: features,\r\n\t\t\tactions: actions,\r\n\t\t\tresults: results\r\n\t\t});\r\n\t},\r\n\r\n\t// ## Utilities ################################################################################\r\n\r\n\t/** `emptyResults` creates an object that maps every player to an array with 3 zeros.\r\n\t*/\r\n\t'static emptyResults': function emptyResults(players) {\r\n\t\treturn iterable(players).map(function (p) {\r\n\t\t\treturn [p, [0, 0, 0]];\r\n\t\t}).toObject();\r\n\t},\r\n\r\n\t/** This method adds null actions to a copy of the `moves` object.\r\n\t*/\r\n\t'static actionsFromMoves': function getActions(players, moves) {\r\n\t\treturn iterable(players).map(function (p) {\r\n\t\t\treturn [p, moves && moves.hasOwnProperty(p) ? moves[p] : null];\r\n\t\t}).toObject();\r\n\t},\r\n\r\n\t/** Serialization and materialization using Sermat.\r\n\t*/\r\n\t'static __SERMAT__': {\r\n\t\tidentifier: 'Case',\r\n\t\tserializer: function serialize_Case(obj) {\r\n\t\t\treturn [{\r\n\t\t\t\tcount: obj.count,\r\n\t\t\t\tply: obj.ply,\r\n\t\t\t\tfeatures: obj.features,\r\n\t\t\t\tactions: obj.actions,\r\n\t\t\t\tresults: obj.results\r\n\t\t\t}];\r\n\t\t}\r\n\t}\r\n}); // declare Case","/** # CaseBase \r\n\r\nA `CaseBase` holds all cases for a game.\r\n*/\r\nvar CaseBase = exports.CaseBase = declare({\r\n\tconstructor: function CaseBase(params) {\r\n\t\tthis.game = params && params.game;\r\n\t\tif (params && typeof params.Case === 'function') {\r\n\t\t\tthis.Case = params.Case;\r\n\t\t}\r\n\t\tthis.random = params && params.random || Randomness.DEFAULT;\r\n\t},\r\n\r\n\t/** ## Distances ########################################################################### */\r\n\r\n\t/** The default `distance` is a form of Manhattan distance, which does not count `null` or \r\n\t`NaN` features.\r\n\t*/\r\n\tdistance: function distance(features1, features2) {\r\n\t\treturn base.Iterable.zip(features1, features2).mapApply(function (f1, f2) {\r\n\t\t\tif (f1 !== null && !isNaN(f1) && f2 !== null && !isNaN(f2)) {\r\n\t\t\t\treturn Math.abs(f1 - f2);\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}).sum();\r\n\t},\r\n\r\n\t/** ## Case acquisition #################################################################### */\r\n\r\n\t/** Adding a case to the database is not implemented by default.\r\n\t*/\r\n\taddCase: unimplemented('CaseBase', 'addCase(_case)'),\r\n\r\n\t/** The `addMatch` method runs the given `match` and adds all its game states as cases in the\r\n\tdatabase. It returns a promise.\r\n\t*/\r\n\taddMatch: function addMatch(match, options) {\r\n\t\tvar cdb = this,\r\n\t\t\tretainThreshold = +options.retainThreshold || 0;\r\n\t\treturn match.run().then(function () {\r\n\t\t\tvar result = match.result(),\r\n\t\t\t\thistory = match.history,\r\n\t\t\t\tentry, _case, breakStoring;\r\n\t\t\tfor (var i = history.length - 1; i >= 0; i--) {\r\n\t\t\t\tentry = history[i];\r\n\t\t\t\tif (entry.moves) {\r\n\t\t\t\t\tcdb.Case.fromGame(entry.state, i, entry.moves).forEach(function (_case) {\r\n\t\t\t\t\t\t_case.addResult(result);\r\n\t\t\t\t\t\tcdb.addCase(_case);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//FIXME\r\n\t\t\t\t\t// breakStoring = retainThreshold !== 0 && retainThreshold > cdb.closestDistance(entry.state);\r\n\t\t\t\t\t// cdb.addCase(_case);\r\n\t\t\t\t\t// if (breakStoring) {\r\n\t\t\t\t\t//\tbreak;\r\n\t\t\t\t\t// }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn match;\r\n\t\t});\r\n\t},\r\n\r\n\t/** The `addMatches` method takes a sequence of `matches`, runs each in order and adds all \r\n\tresulting game states to the database. It returns a promise.\r\n\t*/\r\n\taddMatches: function addMatches(matches, options) {\r\n\t\tvar cdb = this,\r\n\t\t\tmatchCount = 0,\r\n\t\t\tintervalId = 0;\r\n\t\tif (options.logger) {\r\n\t\t\tintervalId = setInterval(function () {\r\n\t\t\t\toptions.logger.info(\"Added \"+ matchCount +\" matches.\");\r\n\t\t\t}, options.logTime || 30000);\r\n\t\t}\r\n\t\treturn Future.sequence(matches, function (match) {\r\n\t\t\tmatchCount++;\r\n\t\t\treturn cdb.addMatch(match, options);\r\n\t\t}).then(function (r) {\r\n\t\t\tif (options.logger) {\r\n\t\t\t\toptions.logger.info(\"Added \"+ matchCount +\" matches.\");\r\n\t\t\t}\r\n\t\t\tclearInterval(intervalId);\r\n\t\t\treturn r;\r\n\t\t});\r\n\t},\r\n\r\n\t/** The `populate` method adds cases to the database by running several matches and adding the\r\n\tresulting game states. The `options` argument may include the following:\r\n\r\n\t+ `game`: The game state from which to start the matches. The database's `game` is used by \r\n\tdefault.\r\n\r\n\t+ `n`: The number of matches to run; 100 by default.\r\n\r\n\t+ `trainer`: The player to use agains the opponents. A random player is used by default.\r\n\r\n\t+ `players`: The trainer's opponents to use to play the matches. The trainer is used by default.\r\n\r\n\tOther options are passed to the `addMatches` method. The result is a promise.\r\n\t*/\r\n\tpopulate: function populate(options) {\r\n\t\toptions = options || {};\r\n\t\tvar cdb = this,\r\n\t\t\tgame = options.game || this.game,\r\n\t\t\tn = isNaN(options.n) ? 100 : +options.n,\r\n\t\t\ttrainer = options.trainer || new ludorum.players.RandomPlayer({ name: 'RandomPlayer' }),\r\n\t\t\tplayers = options.players || [trainer];\r\n\t\tif (!Array.isArray(players)) {\r\n\t\t\tplayers = [players];\r\n\t\t}\r\n\t\tvar tournament = new ludorum.tournaments.Measurement(game, trainer, players, 1),\r\n\t\t\tmatchups = tournament.__matches__().toArray();\r\n\t\treturn this.addMatches(Iterable.range(Math.ceil(n / matchups.length))\r\n\t\t\t.product(matchups)\r\n\t\t\t.mapApply(function (i, match) {\r\n\t\t\t\treturn new ludorum.Match(game, match.players);\r\n\t\t\t}), options);\r\n\t},\r\n\r\n\t/** ## Database use ######################################################################## */\r\n\r\n\t/** The `cases` method returns the sequence of all cases in the database. Case order is not\r\n\tdefined.\r\n\t*/\r\n\tcases: unimplemented('CaseBase', 'cases(filters)'),\r\n\r\n\t/** The `nn` method returns the `k` neareast neighbours of the given game state. \r\n\t*/\r\n\tnn: function nn(k, game) {\r\n\t\tvar cb = this,\r\n\t\t\tcases = iterable(this.Case.fromGame(game)),\r\n\t\t\tcs = iterable(this.cases()).map(function (_case) {\r\n\t\t\t\tvar d = cases.map(function (c) {\r\n\t\t\t\t\treturn cb.distance(_case.features, c.features);\r\n\t\t\t\t}).min();\r\n\t\t\t\treturn [_case, d];\r\n\t\t\t}).sorted(function (c1, c2) {\r\n\t\t\t\treturn c1[1] - c2[1];\r\n\t\t\t}).toArray();\r\n\t\treturn cs.slice(0, +k);\r\n\t},\r\n\r\n\t/** The `closestDistance` method returns the distance to the closest case in the case base from\r\n\tthe given game state.\r\n\t*/\r\n\tclosestDistance: function closestDistance(game) {\r\n\t\tvar closest = this.nn(1, game);\r\n\t\treturn closest.length === 0 ? Infinity : closest[0][1];\r\n\t},\r\n\r\n\t/**TODO\r\n\t*/\r\n\tactionEvaluations: function actionEvaluations(game, role, options) {\r\n\t\tvar cb = this,\r\n\t\t\tk = options && +options.k || 10,\r\n\t\t\troleIndex = game.players.indexOf(role),\r\n\t\t\tr = base.iterable(game.moves()[role]).map(function (move) {\r\n\t\t\t\treturn [JSON.stringify(move), [move, 0]];\r\n\t\t\t}).toObject(),\r\n\t\t\tknn = cb.nn(k, game);\r\n\t\titerable(knn).forEachApply(function (_case, distance) {\r\n\t\t\tvar m = r[JSON.stringify(_case.actions[roleIndex])],\r\n\t\t\t\tresult = _case.results[role],\r\n\t\t\t\tev, support, ratio;\r\n\t\t\tif (m) {\r\n\t\t\t\tsupport = _case.count / (10 + _case.count);\r\n\t\t\t\tratio = (result[0] + result[2] && \r\n\t\t\t\t\t((result[0] - result[2]) / (result[0] + result[2])));\r\n\t\t\t\tev = support * ratio * (1 / (1 + distance));\r\n\t\t\t\tif (isNaN(ev)) {\r\n\t\t\t\t\traise(\"Action evaluation is NaN for case: \", JSON.stringify(_case),\r\n\t\t\t\t\t\t\" (distance= \", distance, \")!\");\r\n\t\t\t\t}\r\n\t\t\t\tm[1] += ev;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn Object.values(r);\r\n\t},\r\n\r\n\t/**TODO\r\n\t*/\r\n\tgameEvaluation: function gameEvaluation(game, role, options) { //FIXME\r\n\t\tvar cb = this,\r\n\t\t\tk = options && +options.k || 10,\r\n\t\t\tr = base.iterable(game.moves()[role]).map(function (move) {\r\n\t\t\t\treturn [JSON.stringify(move), [move, 0]];\r\n\t\t\t}).toObject(),\r\n\t\t\tknn = cb.nn(k, game, role);\r\n\t\treturn iterable(knn).map(function (_case, distance) {\r\n\t\t\treturn (_case.results[role][0] - _case.results[role][2]) / (1 + distance);\r\n\t\t}).sum();\r\n\t},\r\n\r\n\t/** ## Utilities ########################################################################### */\r\n\r\n\t'static __SERMAT__': {\r\n\t\tidentifier: 'CaseBase',\r\n\t\tserializer: function serialize_CaseBase(obj) { //FIXME\r\n\t\t\treturn [{\r\n\t\t\t\tgame: obj.game,\r\n\t\t\t\tencoding: obj.hasOwnProperty('encoding') ? obj.encoding : null\r\n\t\t\t}];\r\n\t\t}\r\n\t},\r\n}); // declare CaseBase","/** # CBR Player \r\n\r\n*/\r\nvar CBRPlayer = exports.CBRPlayer = base.declare(ludorum.Player, {\r\n\t/** \r\n\t*/\r\n\tconstructor: function CBRPlayer(params) {\r\n\t\tludorum.Player.call(this, params);\r\n\t\tthis.caseBase = params && params.caseBase;\r\n\t\tthis.k = params && params.k || 20;\r\n\t},\r\n\r\n\t/** \r\n\t*/\r\n\tcheckMoves: function checkMoves(game, role) {\r\n\t\tvar r = [[], []];\r\n\t\tthis.movesFor(game, role).forEach(function (move) {\r\n\t\t\tvar game2 = game.perform(move, role),\r\n\t\t\t\tresult = game2.result();\r\n\t\t\tif (!result) {\r\n\t\t\t\tr[1].push(move); // Not a losing move.\r\n\t\t\t} else if (result[role] > 0) {\r\n\t\t\t\tr[0].push(move); // Winning move.\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn r;\r\n\t},\r\n\r\n\t/** A `CBRPlayer` takes the action evaluations from the case base, and splits them into actions\r\n\twith possitive evaluations and the ones with evaluations less than or equal to zero. If there\r\n\tare possitively evaluated actions, one of these is chosen randomly with a probability \r\n\tproportional to the evaluation. If all actions have non possitive evaluations, one of these is\r\n\tchosen with a probability inversely proportional to the evaluation.   \r\n\t*/\r\n\tdecision: function decision(game, role) {\r\n\t\tvar checkMoves = this.checkMoves(game, role);\r\n\t\tif (checkMoves[0].length > 0) {\r\n\t\t\treturn this.random.choice(checkMoves[0]);\r\n\t\t} else if (checkMoves[1].length < 2) {\r\n\t\t\tif (checkMoves[1].length === 1) {\r\n\t\t\t\treturn checkMoves[1][0];\r\n\t\t\t} else { // if (checkMoves[1].length < 1)\r\n\t\t\t\treturn this.random.choice(this.movesFor(game, role));\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar actions = iterable(checkMoves[1]).map(function (action) {\r\n\t\t\t\treturn [action +'', [action, 0]];\r\n\t\t\t}).toObject();\r\n\t\tthis.caseBase.actionEvaluations(game, role, { k: this.k }).forEach(function (t) {\r\n\t\t\tvar entry = actions[t[0] +''];\r\n\t\t\tif (entry) {\r\n\t\t\t\tentry[1] += t[1];\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar minEval = +Infinity,\r\n\t\t\tpositiveActions = Object.values(actions).filter(function (t) {\r\n\t\t\t\tminEval = Math.min(minEval, t[1]);\r\n\t\t\t\treturn t[1] > 0;\r\n\t\t\t}),\r\n\t\t\tnegativeActions = Object.values(actions).filter(function (t) {\r\n\t\t\t\treturn t[1] <= 0;\r\n\t\t\t}).map(function (t) {\r\n\t\t\t\treturn [t[0], t[1] - minEval];\r\n\t\t\t}),\r\n\t\t\tresult;\r\n\t\tif (positiveActions.length > 1) {\r\n\t\t\tresult = this.random.weightedChoice(this.random.normalizeWeights(positiveActions));\r\n\t\t} else if (positiveActions.length === 1) {\r\n\t\t\tresult = positiveActions[0][0];\r\n\t\t} else {\r\n\t\t\tresult = this.random.weightedChoice(this.random.normalizeWeights(negativeActions));\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\r\n\t// Utilities. /////////////////////////////////////////////////////////////////////////////////\r\n\r\n\tassess: function assess(players, options) {\r\n\t\tif (!Array.isArray(players)) {\r\n\t\t\tplayers = [players];\r\n\t\t}\r\n\t\tvar cbrPlayer = this,\r\n\t\t\tgame = this.caseBase.game,\r\n\t\t\tevaluation = iterable(players).map(function (player) {\r\n\t\t\t\treturn [player.name, iterable(game.players).map(function (p) {\r\n\t\t\t\t\t\treturn [p, [0,0,0]];\r\n\t\t\t\t\t}).toObject()];\r\n\t\t\t\t}).toObject(),\r\n\t\t\tn = options && +options.n || 300,\r\n\t\t\tfinishedMatchesCount = 0,\r\n\t\t\tintervalId = 0;\r\n\t\tif (options.logger) {\r\n\t\t\tintervalId = setInterval(function () {\r\n\t\t\t\toptions.logger.info(\"Assessment finished \"+ finishedMatchesCount +\" matches.\");\r\n\t\t\t}, options.logTime || 30000);\r\n\t\t}\r\n\t\treturn base.Future.sequence(base.Iterable.range(n).product(players), function (tuple) {\r\n\t\t\tvar player = tuple[1],\r\n\t\t\t\tmatchPlayers = base.Iterable.repeat(player, game.players.length).toArray(),\r\n\t\t\t\tplayerIndex = tuple[0] % game.players.length,\r\n\t\t\t\tplayerRole = game.players[playerIndex];\r\n\t\t\tmatchPlayers[playerIndex] = cbrPlayer;\r\n\t\t\tvar match = new ludorum.Match(game, matchPlayers);\r\n\t\t\treturn match.run().then(function () {\r\n\t\t\t\tvar r = match.result()[playerRole];\r\n\t\t\t\tevaluation[player.name][playerRole][r > 0 ? 0 : r < 0 ? 2 : 1]++;\r\n\t\t\t\tfinishedMatchesCount++;\r\n\t\t\t});\r\n\t\t}).then(function () {\r\n\t\t\tclearInterval(intervalId);\r\n\t\t\tif (options.logger) {\r\n\t\t\t\toptions.logger.info(\"Assessment finished \"+ finishedMatchesCount +\" matches.\");\r\n\t\t\t}\r\n\t\t\treturn evaluation;\r\n\t\t});\r\n\t}\r\n}); // declare CBRPlayer","/** # MemoryCaseBase\r\n\r\nA memory implementation of a `CaseBase`.\r\n*/\r\nvar MemoryCaseBase = dbs.MemoryCaseBase = declare(CaseBase, {\r\n\tconstructor: function MemoryCaseBase(params) {\r\n\t\tCaseBase.call(this, params);\r\n\t\tthis.__cases__ = [];\r\n\t\tthis.__index__ = {};\r\n\t},\r\n\r\n\tcases: function cases() {\r\n\t\treturn base.iterable(this.__cases__);\r\n\t},\r\n\t\r\n\taddCase: function addCase(_case) {\r\n\t\tvar id = _case.identifier();\r\n\t\tif (this.__index__[id]) {\r\n\t\t\tvar storedCase = this.__cases__[this.__index__[id]];\r\n\t\t\tstoredCase.merge(_case);\r\n\t\t} else {\r\n\t\t\tvar i = this.__cases__.push(_case) - 1;\r\n\t\t\tthis.__index__[id] = i;\r\n\t\t}\r\n\t}\r\n}); // declare MemoryCaseBase","// See __prologue__.js\r\n\treturn exports;\r\n}\r\n","/** # SQLiteCaseBase\r\n\r\nAn implementation of a `CaseBase` using SQLite3 through `better-sqlite3`.\r\n*/\r\ndbs.SQLiteCaseBase = declare(CaseBase, {\r\n\t/** \r\n\t*/\r\n\tconstructor: function SQLiteCaseBase(params) {\r\n\t\tCaseBase.call(this, params);\r\n\t\tthis.__setupDatabase__(params);\r\n\t},\r\n\r\n\t/** ## Database setup and management ####################################################### */\r\n\r\n\t/**\r\n\t*/\r\n\t__setupDatabase__: function __setupDatabase__(params) {\r\n\t\tvar game = this.game,\r\n\t\t\tDatabase = this.Database || require('better-sqlite3');\r\n\t\tif (params.db instanceof Database) {\r\n\t\t\tthis.__db__ = params.db;\r\n\t\t} else {\r\n\t\t\tthis.__db__ = new Database(typeof params.db === 'string' ? params.db : \r\n\t\t\t\t'./'+ game.name.toLowerCase() +'-cbr.sqlite');\r\n\t\t\tthis.__db__.pragma('journal_mode = OFF'); // Disable transactions.\r\n\t\t\tthis.__db__.pragma('cache_size = -128000'); // Increase default cache size.\r\n\t\t\tthis.__db__.pragma('encoding = \"UTF-8\"'); // Increase default cache size.\r\n\t\t}\r\n\t\t\r\n\t\tthis.__tableName__ = params.tableName || 'CB_'+ game.name;\r\n\t\tthis.__createTable__();\r\n\t},\r\n\r\n\t__createTable__: function __createTable__(tableName, game) {\r\n\t\ttableName = tableName || this.__tableName__;\r\n\t\tgame = game || this.game;\r\n\t\tvar _case = this.Case.fromGame(game)[0],\r\n\t\t\tactionColumns = game.players.map(function (p) {\r\n\t\t\t\treturn 'a_'+ p +' TEXT';\r\n\t\t\t}).join(', '),\r\n\t\t\tresultColumns = game.players.map(function (p) {\r\n\t\t\t\treturn 'won_'+ p +' INTEGER, tied_'+ p +' INTEGER, lost_'+ p +' INTEGER';\r\n\t\t\t}).join(', '),\r\n\t\t\tfeatureColumns = _case.features.map(function (_, i) {\r\n\t\t\t\treturn 'f'+ i +' INTEGER';\r\n\t\t\t}).join(', ');\r\n\t\treturn this.__runSQL__('CREATE TABLE IF NOT EXISTS '+ tableName +\r\n\t\t\t'(id TEXT PRIMARY KEY, count INTEGER, ply REAL, '+\r\n\t\t\tactionColumns +', '+ resultColumns +', '+ featureColumns +')');\r\n\t},\r\n\r\n\t__runSQL__: function __runSQL__(sql) {\r\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\r\n\t\ttry {\r\n\t\t\tvar stmt = this.__db__.prepare(sql);\r\n\t\t\treturn stmt.run.apply(stmt, args);\r\n\t\t} catch (err) {\r\n\t\t\tthrow new Error(\"Error executing `\"+ sql +\"` \"+ JSON.stringify(args) +\"!\");\r\n\t\t}\r\n\t},\r\n\r\n\t__getSQL__: function __getSQL__(sql) {\r\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\r\n\t\ttry {\r\n\t\t\tvar stmt = this.__db__.prepare(sql);\r\n\t\t\treturn stmt.all.apply(stmt, args);\r\n\t\t} catch (err) {\r\n\t\t\tthrow new Error(\"Error querying `\"+ sql +\"` \"+ JSON.stringify(args) +\"!\");\r\n\t\t}\r\n\t},\r\n\r\n\t/** ## Cases ############################################################################### */\r\n\r\n\taddCase: function addCase(_case) {\r\n\t\tvar players = this.game.players,\r\n\t\t\trecord = _case.record(),\r\n\t\t\tfields = Object.keys(record),\r\n\t\t\tsql = 'INSERT OR IGNORE INTO '+ this.__tableName__ +' ('+ fields.join(',') +\r\n\t\t\t\t') VALUES ('+ Iterable.repeat('?', fields.length).join(',') +')',\r\n\t\t\tisNew = this.__runSQL__(sql, fields.map(function (f) {\r\n\t\t\t\t\treturn record[f];\r\n\t\t\t\t})).changes > 0;\r\n\t\tif (!isNew) { // Insert was ignored because the case is already stored.\r\n\t\t\tthis.__runSQL__('UPDATE '+ this.__tableName__ +' '+\r\n\t\t\t\t'SET count = count + 1, ply = (ply * count + '+ (_case.ply || 0) +') / (count + 1), '+\r\n\t\t\t\tplayers.map(function (p) {\r\n\t\t\t\t\tvar r = _case.results[p],\r\n\t\t\t\t\t\tsets = [];\r\n\t\t\t\t\tif (r[0]) {\r\n\t\t\t\t\t\tsets.push('won_'+ p +' = won_'+ p +' + '+ r[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (r[1]) {\r\n\t\t\t\t\t\tsets.push('tied_'+ p +' = tied_'+ p +' + '+ r[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (r[2]) {\r\n\t\t\t\t\t\tsets.push('lost_'+ p +' = lost_'+ p +' + '+ r[2]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn sets.join(', ');\r\n\t\t\t\t}).join(', ') +' WHERE id = \\''+ record.id +'\\''\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\r\n\tcases: function cases() {\r\n\t\treturn this.__getSQL__('SELECT * FROM '+ this.__tableName__)\r\n\t\t\t.map(this.Case.fromRecord.bind(this.Case));\r\n\t},\r\n\r\n\t__nn_sql__: function __nn_sql__(k, game) {\r\n\t\tvar cases = this.Case.fromGame(game);\r\n\t\treturn 'SELECT *, min('+ cases.map(function (_case) {\r\n\t\t\t\treturn _case.features.map(function (v, i) {\r\n\t\t\t\t\treturn v !== null && !isNaN(v) ? 'abs(ifnull(f'+ i +'-('+ v +'),0))' : '0';\r\n\t\t\t\t}).join('+');\r\n\t\t\t}).join(', ') +') AS distance '+\r\n\t\t\t'FROM '+ this.__tableName__ +' '+\r\n\t\t\t'ORDER BY distance ASC LIMIT '+ k;\r\n\t},\r\n\r\n\tnn: function nn(k, game) {\r\n\t\tvar cb = this,\r\n\t\t\tsql = this.__nn_sql__(k, game);\r\n\t\treturn this.__db__.prepare(sql).all().map(function (row) {\r\n\t\t\treturn [cb.Case.fromRecord(row), row.distance];\r\n\t\t});\r\n\t}\r\n}); // declare SQLiteCaseBase\r\n\r\n","/**\r\n \r\n*/\r\ngames.TicTacToe = (function () {\r\n\tfunction directFeatures(game) {\r\n\t\tvar board = typeof game === 'string' ? game : game.board;\r\n\t\treturn board.split('').map(function (chr) {\r\n\t\t\treturn chr === 'X' ? (+1) : chr === 'O' ? (-1) : 0; \r\n\t\t});\r\n\t}\r\n\r\n\tvar MAPPINGS = [\r\n\t\t[0,1,2,3,4,5,6,7,8], // original\r\n\t\t[2,1,0,5,4,3,8,7,6], // vertical axis symmetry\r\n\t\t[6,7,8,3,4,5,0,1,2], // horizontal axis symmetry\r\n\t\t[6,3,0,7,4,1,8,5,2], // 90 clockwise rotation\r\n\t\t[2,5,8,1,4,7,0,3,6], // 90 counter-clockwise rotation \r\n\t\t[8,7,6,5,4,3,2,1,0], // central symmetry\r\n\t\t[8,5,2,7,4,1,6,3,0], // 90 counter-clockwise rotation + vertical axis symmetry\r\n\t\t[0,3,6,1,4,7,2,5,8]  // 90 clockwise rotation + vertical axis symmetry\r\n\t];\r\n\r\n\tfunction equivalent(game) {\r\n\t\tvar board = typeof game === 'string' ? game : game.board,\r\n\t\t\tmaps = MAPPINGS.map(function (mapping) {\r\n\t\t\t\treturn mapping.map(function (i) {\r\n\t\t\t\t\treturn board.charAt(i);\r\n\t\t\t\t}).join('');\r\n\t\t\t});\r\n\t\tmaps.sort();\r\n\t\treturn maps;\r\n\t}\r\n\r\n\treturn {\r\n\t\tdirectFeatures: directFeatures,\r\n\r\n\t\t/**\r\n\t\t*/\r\n\t\tDirectCase: declare(Case, {\r\n\t\t\t'static fromGame': function fromGame(game, ply, moves) {\r\n\t\t\t\tvar _case = new this({\r\n\t\t\t\t\t\tply: +ply,\r\n\t\t\t\t\t\tfeatures: directFeatures(game),\r\n\t\t\t\t\t\tactions: Case.actionsFromMoves(game.players, moves),\r\n\t\t\t\t\t\tresults: Case.emptyResults(game.players)\r\n\t\t\t\t\t});\r\n\t\t\t\treturn [_case];\r\n\t\t\t}\r\n\t\t}),\r\n\r\n\t\tequivalent: equivalent,\r\n\r\n\t\t/**\r\n\t\t*/\r\n\t\tEquivalenceCase: declare(Case, {\r\n\t\t\t'static fromGame': function fromGame(game, ply, moves) {\r\n\t\t\t\tvar board = game.board.split(''),\r\n\t\t\t\t\tactivePlayer = game.activePlayer();\r\n\t\t\t\tif (moves) {\r\n\t\t\t\t\tboard[moves[activePlayer]] = '!';\r\n\t\t\t\t}\r\n\t\t\t\tvar boards = equivalent(board.join('')).map(function (b) {\r\n\t\t\t\t\tvar m = b.indexOf('!');\r\n\t\t\t\t\treturn b.replace('!', '_') + m;\r\n\t\t\t\t});\r\n\t\t\t\tboards.sort();\r\n\t\t\t\tboard = boards[0];\r\n\t\t\t\tif (moves) {\r\n\t\t\t\t\tmoves[activePlayer] = +(board.substr(9));\r\n\t\t\t\t}\r\n\t\t\t\tvar _case = new this({\r\n\t\t\t\t\t\tply: +ply,\r\n\t\t\t\t\t\tfeatures: directFeatures(board.substr(0,9)),\r\n\t\t\t\t\t\tactions: Case.actionsFromMoves(game.players, moves),\r\n\t\t\t\t\t\tresults: Case.emptyResults(game.players)\r\n\t\t\t\t\t});\r\n\t\t\t\treturn [_case];\r\n\t\t\t}\r\n\t\t})\r\n\t};\r\n})(); // declare TicTacToe.DirectCase","/**\r\n */\r\ngames.Risk = (function () {\r\n  return {\r\n    /** The \"Risk\" encoding has 83 features , 42 to define the number of troops in a territory,\r\n     *  42 to define to which player that territory corresponds based on its turn,\r\n     *  being 0 the corresponding player with the current turn,\r\n     *  1 the next and so successively and 1 that determines the stage of the game  */\r\n\r\n    Turn: function turn(game, otherPlayer) {\r\n      var active = game.players.indexOf(active);\r\n      var other = game.players.indexOf(otherPlayer);\r\n      if (other > active) {\r\n        return other - active;\r\n      } else {\r\n        return 6 - (active - other);\r\n      }\r\n    },\r\n\r\n    Risk: function encodingRisk(game, moves, ply) {\r\n      return {\r\n        ply: ply,\r\n        features: game.boardMap.territories\r\n          .map(t => turn(game, s[t][0])).concat(s[t][1]).concat(stage), // For each territory , assign colour and number of troops , change colour based on turn.\r\n        actions: !moves ? null : game.players.map(function (p) {\r\n          return moves.hasOwnProperty(p) ? moves[p] : null;\r\n        })\r\n      };\r\n    }\r\n  };\r\n})();\r\n"]}